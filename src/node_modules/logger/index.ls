require! {
# -------------------------------------------------------------------------- STD
	util
}



# TODO Use a proxy for on and off. When on, forward. When off, filter.

export class Logger
	~>
		@ <<< {
			logCount: 1
			sepCount: 1

			-doLog
			+turnOffOnSeparator

			overrides: {}
			blacklist: []

			outputWidth: 80
			sepChar: '-'

			prefixes:
				fatal: '''

					CHECK THIS:
				'''
				exception: 'Exception: '
			messages:
				fail: 'WARNING: didn\'t fail as expected'
		}



################################################################################
# Logging
################################################################################

	logString: (str) !->
		console.log str

	logstring: ::logString
	logStr: ::logString
	logstr: ::logString



################################################################################
# Serialization
################################################################################

	# stringify: -> util.inspect @clean(it), {depth: null, +colors, -showHidden}
	stringify: ->
		util.inspect it, {depth: null, +colors, -showHidden}

	# clean: (node) ->
	# 	switch typeof! node
	# 	| 'Object'
	# 		result = {}
	# 		for key, value of node | key not in @blacklist
	# 			overriden = @override key, value
	# 			if typeof! overriden isnt 'Function' => result[key] = @clean overriden
	# 	| 'Array' => result = [@clean .. for node]
	# 	| _ => result = node
	# 	result

	# override: (key, value) ->
	# 	if @overrides[key]? => @overrides[key] value else value



################################################################################
# Display configuration
################################################################################

	on: -> @doLog = yes
	off: -> @doLog = no
	toggle: -> @doLog = not @doLog



################################################################################
# Display
################################################################################

	separator: (label) !->
		# --------------------------------------------------------------- output

		prefix = if label? => " - #that" else ''
		dashes = "#{@sepChar}" * (@outputWidth - prefix.length)

		output = """

			#{@sepCount}#prefix #dashes

		"""

		# -------------------------------------------------------------- actions

		@logString output

		@logCount = 1
		@sepCount++
		if @turnOffOnSeparator => @off!

	sep: ::separator


	delimiter: !-> if @doLog
		@logString "#{@sepChar}" * (@outputWidth / 2)



################################################################################
# Testing workflow
################################################################################

	log: !(value, prefix) -> if @doLog
		prefix ?= ''
		str = @stringify value
		@logString "#{@logCount}: #prefix#str"
		@logCount++

	# test: ::log

	fail: (fn) !-> if @doLog
		try
			fn!
			@log @messages.fail
		catch e
			@log e, @prefixes.exception

	fatal: (fn) !->
		@logString @prefixes.fatal
		@fail fn
		@stop 1

	stop: (code = 0) !->
		process.exit 0



################################################################################
# Other
################################################################################

	setFactory: (fn) ->
		@factoryFunction = fn

	factory: (input, context) !->
		@log {
			input
			context
			result: @factoryFunction input, context
		}
